use packet_serde_derive::PacketSerde;

use crate::minecraft::{
    packet::{ConnectionState, Packet, PacketSerde, PacketReadable, PacketWritable},
    types,
};


#[derive(PacketSerde, Debug, Clone)]
pub struct DisconnectPacket {
    pub reason: types::String,
}

impl Packet for DisconnectPacket {
    const ID: i32 = 0x00;
    const PHASE: ConnectionState = ConnectionState::Login;
}


#[derive(PacketSerde, Debug, Clone)]
pub struct EncryptionRequestPacket {
    pub server_id: types::String,               // max 20 characters
    pub public_key: types::ByteArray,           // the server's public key in bytes
    pub verify_token: types::ByteArray,         // A sequence of random bytes generated by the server.
    pub should_authenticate: types::Boolean,    // Whether the client should attempt to authenticate through mojang servers.
}

impl Packet for EncryptionRequestPacket {
    const ID: i32 = 0x01;
    const PHASE: ConnectionState = ConnectionState::Login;
}


#[derive(PacketSerde, Debug, Clone)]
pub struct LoginProperty {
    pub name: types::String,
    pub value: types::String,
    pub signature: types::Optional<types::String>,
}

#[derive(PacketSerde, Debug, Clone)]
pub struct LoginSuccessPacket {
    pub uuid: types::UUID,
    pub username: types::String,
    pub properties: types::Array<LoginProperty>,
}

impl Packet for LoginSuccessPacket {
    const ID: i32 = 0x02;
    const PHASE: ConnectionState = ConnectionState::Login;
}


#[derive(PacketSerde, Debug, Clone)]
pub struct SetCompressionPacket {
    pub threshold: types::VarInt,
}

impl Packet for SetCompressionPacket {
    const ID: i32 = 0x03;
    const PHASE: ConnectionState = ConnectionState::Login;
}


#[derive(PacketSerde, Debug, Clone)]
pub struct PluginRequestPacket {
    pub message_id: types::VarInt,
    pub channel: types::Identifier,
    pub data: types::UnsizedByteArray,
}

impl Packet for PluginRequestPacket {
    const ID: i32 = 0x04;
    const PHASE: ConnectionState = ConnectionState::Login;
}


#[derive(PacketSerde, Debug, Clone)]
pub struct CookieRequest {
    pub key: types::Identifier,
}

impl Packet for CookieRequest {
    const ID: i32 = 0x05;
    const PHASE: ConnectionState = ConnectionState::Login;
}
