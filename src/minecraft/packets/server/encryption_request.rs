use std::io::{Read, Seek, Write};

use crate::minecraft::packets::{
    ConnectionState, Packet, PacketIn, PacketOut, PacketReader, PacketRecv, PacketSend, PacketWriter
};

const UNWRAP_ERROR: &str = "EncryptionRequestPacket: Unexpected error while reading value.";

#[derive(Debug)]
pub struct EncryptionRequestPacket {
    server_id: String,         // max 20 characters
    public_key: Vec<u8>,       // the server's public key in bytes
    verify_token: Vec<u8>,     // A sequence of random bytes generated by the server.
    should_authenticate: bool, // Whether the client should attempt to authenticate through mojang servers.
}

impl EncryptionRequestPacket {
    #[inline]
    pub fn new(
        server_id: &str,
        public_key: Vec<u8>,
        verify_token: Vec<u8>,
        should_authenticate: bool,
    ) -> Self {
        Self {
            server_id: server_id.to_string(),
            public_key,
            verify_token,
            should_authenticate,
        }
    }

    pub fn get_server_id(&self) -> String {
        self.server_id.clone()
    }

    pub fn get_public_key(&self) -> Vec<u8> {
        self.public_key.clone()
    }

    pub fn get_verify_token(&self) -> Vec<u8> {
        self.verify_token.clone()
    }

    pub fn should_authenticate(&self) -> bool {
        self.should_authenticate.clone()
    }
}

impl Packet for EncryptionRequestPacket {
    const ID: i32 = 0x01;
    const PHASE: ConnectionState = ConnectionState::Login;
}

impl<T: Read + Seek> PacketIn<T> for EncryptionRequestPacket {
    fn read(reader: &mut PacketReader<T>) -> Self {
        Self {
            server_id: reader.read_string(),
            public_key: reader.read_ubyte_array(),
            verify_token: reader.read_ubyte_array(),
            should_authenticate: reader.read_boolean(),
        }
    }
}

impl<T: Write + Seek> PacketOut<T> for EncryptionRequestPacket {
    fn write(&self, writer: &mut PacketWriter<T>) {
        writer.write_str(self.server_id.as_str());
        writer.write_ubyte_array(self.public_key.clone());
        writer.write_ubyte_array(self.verify_token.clone());
        writer.write_boolean(self.should_authenticate);
    }
}

impl PacketRecv for EncryptionRequestPacket {}
impl PacketSend for EncryptionRequestPacket {}
